k8s {
  namespace = 'medgen-ns'
   runAsUser = 1000
   storageClaimName = 'pvc-jans-elixir-share'
   storageMountPath = '/mnt'
   homeDir = '/mnt/share/710000-CEITEC/713000-cmm/713003-pospisilova/cmbg/germ'
   launchDir = "${k8s.homeDir}/src/launch"
   projectDir = "${k8s.homeDir}/src/project"
   workDir = "${k8s.homeDir}/src/temp"
}

params {
   outDirectory = "${k8s.homeDir}/data"
   ref = '/mnt/share/710000-CEITEC/713000-cmm/713003-pospisilova/base/MedGen/references/Homo_sapiens/GATK/GRCh38/Sequence/WholeGenomeFasta/Homo_sapiens_assembly38'
   vep = '/mnt/share/710000-CEITEC/713000-cmm/713003-pospisilova/base/MedGen/references/Homo_sapiens/GATK/GRCh38/Annotation/vep'
   refindex = '/mnt/share/710000-CEITEC/713000-cmm/713003-pospisilova/base/MedGen/references/Homo_sapiens/GATK/GRCh38/Sequence/BWAIndex/Homo_sapiens_assembly38.fasta.64'
   covbed = "${k8s.projectDir}/xsvato01/mareckova_CXCR_k8s/beds/mareckovaBed_GRCh38.bed"
   vcftbl = "${k8s.projectDir}/xsvato01/mareckova_CXCR_k8s/src/vcf2table108.py"
   coverstat = "${k8s.projectDir}/xsvato01/mareckova_CXCR_k8s/src/coverage_stat.R"
   mergetables = "${k8s.projectDir}/xsvato01/mareckova_CXCR_k8s/src/JoinVars.py"
}


executor {
   queueSize = 100
}


process {
  shell = ['/bin/bash', '-eo', 'pipefail']
   scratch = true
   executor = 'k8s'
   pod = [[imagePullSecret:'gitlab-svaton-secret'], [securityContext:[fsGroupChangePolicy:'OnRootMismatch', allowPrivilegeEscalation:false, runAsUser:1000, runAsGroup:1, fsGroup:1, capabilities:[drop:['ALL']]]], [nodeSelector:'storage=local-ssd']]
   errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish' }
   maxRetries = 3
   cpus = 1
   memory = '1GB'

   withLabel: xxs_mem {
      memory = {100.MB * task.attempt * (3/4)}
   }
   withLabel: xs_mem {
      memory = {500.MB * task.attempt * (3/4)}
   }
   withLabel: s_mem {
      memory = {1.GB * task.attempt * (3/4)}
   }
   withLabel: m_mem {
      memory = {2.GB * task.attempt * (3/4)}
   }
   withLabel: l_mem {
      memory = {8.GB * task.attempt * (3/4)}
   }     
   withLabel: s_cpu {
      cpus = 1
   }
   withLabel: m_cpu {
      cpus = 4
   }
   withLabel: l_cpu {
      cpus = 8
   }
}
